{"version":3,"sources":["components/FriendCard/FriendCard.js","components/Nav/Nav.js","components/Wrapper/Wrapper.js","components/Title/Title.js","App.js","serviceWorker.js","index.js"],"names":["FriendCard","props","react_default","a","createElement","className","alt","name","src","image","Nav","children","Wrapper","Title","App","state","butterfly","currentScore","topScore","rightWrong","clicked","handleClick","id","_this","indexOf","handleIncrement","setState","concat","handleReset","newScore","handleShuffle","shuffledcard","array","i","length","j","Math","floor","random","_ref","shufflecard","friends","_this2","this","components_Wrapper_Wrapper","Nav_Nav","score","Title_Title","map","components_FriendCard_FriendCard","key","onClick","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"i4BAsBeA,SAnBI,SAAAC,GAAK,OAEpBC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,QAEhBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBAEfH,EAAAC,EAAAC,cAAA,OAAKE,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,kBCFtBC,MAJf,SAAaT,GACX,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,OAAOJ,EAAMU,WCErBC,SAFC,SAAAX,GAAK,OAAIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMU,kBCG1CE,MAJf,SAAeZ,GACb,OAAOC,EAAAC,EAAAC,cAAA,MAAIC,UAAU,SAASJ,EAAMU,4BCiGvBG,6MAnFbC,MAAQ,CACNC,YACAC,aAAc,EACdC,SAAU,EACVC,WAAY,GACZC,QAAS,MAGXC,YAAc,SAAAC,IAE4B,IAApCC,EAAKR,MAAMK,QAAQI,QAAQF,IAC7BC,EAAKE,kBACLF,EAAKG,SAAS,CAAEN,QAASG,EAAKR,MAAMK,QAAQO,OAAOL,MAEnDC,EAAKK,iBAITH,gBAAkB,WAChB,IAAMI,EAAWN,EAAKR,MAAME,aAAe,EAC3CM,EAAKG,SAAS,CACZT,aAAcY,EACdV,WAAY,KAGVU,GAAYN,EAAKR,MAAMG,SACzBK,EAAKG,SAAS,CAAER,SAAUW,IAEN,KAAbA,GACPN,EAAKG,SAAS,CAAEP,WAAY,kBAE9BI,EAAKO,mBAITF,YAAc,WACZL,EAAKG,SAAS,CACZT,aAAc,EACdC,SAAUK,EAAKR,MAAMG,SACrBC,WAAY,6CACZC,QAAS,KAEXG,EAAKO,mBAGPA,cAAgB,WACd,IAAIC,EAxDN,SAAqBC,GACnB,IAAK,IAAIC,EAAID,EAAME,OAAQ,EAAGD,EAAI,EAAGA,IAAK,CACxC,IAAME,EAAIC,KAAKC,MAAMD,KAAKE,UAAYL,EAAI,IADFM,EAEjB,CAACP,EAAMG,GAAIH,EAAMC,IAAvCD,EAAMC,GAFiCM,EAAA,GAE7BP,EAAMG,GAFuBI,EAAA,GAI1C,OAAOP,EAmDYQ,CAAYxB,GAC/BO,EAAKG,SAAS,CAAEe,QAASV,6EAKhB,IAAAW,EAAAC,KACP,OAEEzC,EAAAC,EAAAC,cAACwC,EAAD,KACE1C,EAAAC,EAAAC,cAACyC,EAAD,CACAC,MAAOH,KAAK5B,MAAME,aAClBC,SAAUyB,KAAK5B,MAAMG,SACrBC,WAAYwB,KAAK5B,MAAMI,aAGvBjB,EAAAC,EAAAC,cAAC2C,EAAD,0BAECJ,KAAK5B,MAAMC,UAAUgC,IAAI,SAAAhC,GAAS,OACjCd,EAAAC,EAAAC,cAAC6C,EAAD,CACAC,IAAKlC,EAAUM,GAEf6B,QAAST,EAAKrB,YACdI,gBAAiBiB,EAAKjB,gBACtBG,YAAac,EAAKd,YAClBE,cAAeY,EAAKZ,cAEpBR,GAAIN,EAAUM,GACdb,MAAQO,EAAUP,kBA5EV2C,aCJEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e2f39779.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\"\n\nconst FriendCard = props => (\n            \n    <div className= \"card\">\n    {/* // onClick={() => props.clickCount(props.id)}> */}\n    <div className=\"img-container\">\n    {/* <img alt={props.image} src={props.image} /> */}\n    <img alt={props.name} src={props.image} />\n    \n    \n    </div>\n    </div>\n \n);\n\n\n\n\n\n\nexport default FriendCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Nav(props) {\n  return <h1 className=\"nav\">{props.children}</h1>;\n}\n\nexport default Nav;","import React from \"react\";\nimport \"./style.css\";\n\n//stateless\nconst Wrapper = props => <div className=\"wrapper\">{props.children}</div>;\n\nexport default Wrapper;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Title(props) {\n  return <h1 className=\"title\">{props.children}</h1>;\n}\n\nexport default Title;\n","import React, { Component } from 'react';\nimport FriendCard from \"./components/FriendCard\";\nimport Nav from \"./components/Nav\";\nimport Wrapper from \"./components/Wrapper\";\nimport Title from \"./components/Title\";\nimport butterfly from \"./butterfly.json\";\nimport './App.css';\n\nfunction shufflecard(array) {\n  for (let i = array.length -1; i > 0; i--) {\n    const j = Math.floor(Math.random() * (i + 1));\n    [array[i], array[j]] = [array[j], array[i]];\n  }\n  return array;\n};\n \nclass App extends Component {\n  // Set this.state\n  state = {\n    butterfly,\n    currentScore: 0,\n    topScore: 0,\n    rightWrong: \"\",\n    clicked: [],\n  };\n\n  handleClick = id => {\n    // let clickedButterflyIds = this.state.clickedButterflyIds;\n    if (this.state.clicked.indexOf(id) === -1) {\n      this.handleIncrement();\n      this.setState({ clicked: this.state.clicked.concat(id) });\n    } else {\n      this.handleReset();\n    }\n  };\n\n  handleIncrement = () => {\n    const newScore = this.state.currentScore + 1;\n    this.setState({\n      currentScore: newScore,\n      rightWrong: \"\"\n    });\n\n    if (newScore >= this.state.topScore) {\n      this.setState({ topScore: newScore });\n    }\n    else if (newScore === 10) {\n      this.setState({ rightWrong: \"You got this!\" });\n    }\n    this.handleShuffle();\n  };\n\n\nhandleReset = () => {\n  this.setState({\n    currentScore: 0,\n    topScore: this.state.topScore,\n    rightWrong: \"Butterfilies are hard to catch. Try again!\",\n    clicked: []\n  });\n  this.handleShuffle();\n};\n\nhandleShuffle = () => {\n  let shuffledcard = shufflecard(butterfly);\n  this.setState({ friends: shuffledcard });\n};    \n\n\n//If clicked on previous butterfly that \n  render() {\n    return (\n        \n      <Wrapper>\n        <Nav\n        score={this.state.currentScore}\n        topScore={this.state.topScore}\n        rightWrong={this.state.rightWrong}\n        />\n\n        <Title>Butterfilies TEST</Title>\n        \n        {this.state.butterfly.map(butterfly => (\n          <FriendCard\n          key={butterfly.id}\n          // handleClick={this.handleClick}\n          onClick={this.handleClick}\n          handleIncrement={this.handleIncrement}\n          handleReset={this.handleReset}\n          handleShuffle={this.handleShuffle}\n          // clicked={this.clicked}\n          id={butterfly.id}\n          image ={butterfly.image}\n          />\n        ))}\n  </Wrapper>\n     \n    );\n}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}