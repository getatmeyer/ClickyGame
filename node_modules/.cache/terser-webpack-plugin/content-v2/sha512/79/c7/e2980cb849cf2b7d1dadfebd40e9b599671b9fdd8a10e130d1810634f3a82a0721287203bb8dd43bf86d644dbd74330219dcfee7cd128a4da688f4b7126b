{"map":"{\"version\":3,\"sources\":[\"/Users/nmeyer/ClickyGame/clickygame/src/components/FriendCard/FriendCard.js\",\"/Users/nmeyer/ClickyGame/clickygame/src/components/Wrapper/Wrapper.js\",\"/Users/nmeyer/ClickyGame/clickygame/src/components/Title/Title.js\",\"/Users/nmeyer/ClickyGame/clickygame/src/App.js\",\"/Users/nmeyer/ClickyGame/clickygame/src/serviceWorker.js\",\"/Users/nmeyer/ClickyGame/clickygame/src/index.js\"],\"names\":[\"FriendCard\",\"props\",\"react_default\",\"a\",\"createElement\",\"className\",\"alt\",\"name\",\"src\",\"image\",\"Wrapper\",\"children\",\"Title\",\"App\",\"state\",\"butterfly\",\"clickedButterfly\",\"score\",\"clicked\",\"event\",\"components_Wrapper_Wrapper\",\"Title_Title\",\"this\",\"map\",\"components_FriendCard_FriendCard\",\"id\",\"key\",\"Component\",\"Boolean\",\"window\",\"location\",\"hostname\",\"match\",\"ReactDOM\",\"render\",\"src_App_0\",\"document\",\"getElementById\",\"navigator\",\"serviceWorker\",\"ready\",\"then\",\"registration\",\"unregister\"],\"mappings\":\"q2BAsBeA,SAnBI,SAAAC,GAAK,OAEpBC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAW,QAEhBH,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,iBAEfH,EAAAC,EAAAC,cAAA,MAAA,CAAKE,IAAKL,EAAMM,KAAMC,IAAKP,EAAMQ,YCJtBC,SAFC,SAAAT,GAAK,OAAIC,EAAAC,EAAAC,cAAA,MAAA,CAAKC,UAAU,WAAWJ,EAAMU,kBCI1CC,IAAAA,EAJf,SAAeX,GACb,OAAOC,EAAAC,EAAAC,cAAA,KAAA,CAAIC,UAAU,SAASJ,EAAMU,kBCyCvBE,oNAjCbC,MAAQ,CACNC,UAAAA,EACAC,iBAAkB,GAClBC,MAAO,KAITC,QAAU,SAAAC,6EAUR,OACEjB,EAAAC,EAAAC,cAACgB,EAAD,KACElB,EAAAC,EAAAC,cAACiB,EAAD,KAAA,gBACCC,KAAKR,MAAMC,UAAUQ,IAAI,SAAAR,GAAS,OACjCb,EAAAC,EAAAC,cAACoB,EAAD,CAEAC,GAAIV,EAAUU,GACdC,IAAKX,EAAUU,GACfhB,MAAQM,EAAUN,kBA1BVkB,EAAAA,YCCEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,EAAAA,EAASC,OAAOhC,EAAAC,EAAAC,cAAC+B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC\",\"sourcesContent\":[\"import React from \\\"react\\\";\\nimport \\\"./style.css\\\"\\n\\nconst FriendCard = props => (\\n            \\n    <div className= \\\"card\\\">\\n    {/* // onClick={() => props.clickCount(props.id)}> */}\\n    <div className=\\\"img-container\\\">\\n    {/* <img alt={props.image} src={props.image} /> */}\\n    <img alt={props.name} src={props.image} />\\n    \\n    \\n    </div>\\n    </div>\\n \\n);\\n\\n\\n\\n\\n\\n\\nexport default FriendCard;\",\"import React from \\\"react\\\";\\nimport \\\"./style.css\\\";\\n\\nconst Wrapper = props => <div className=\\\"wrapper\\\">{props.children}</div>;\\n\\nexport default Wrapper;\",\"import React from \\\"react\\\";\\nimport \\\"./style.css\\\";\\n\\nfunction Title(props) {\\n  return <h1 className=\\\"title\\\">{props.children}</h1>;\\n}\\n\\nexport default Title;\\n\",\"import React, { Component } from 'react';\\nimport FriendCard from \\\"./components/FriendCard\\\";\\n// import Navbar from \\\"./components/Nav\\\";\\nimport Wrapper from \\\"./components/Wrapper\\\";\\nimport Title from \\\"./components/Title\\\";\\nimport butterfly from \\\"./butterfly.json\\\";\\n// import Card from \\\"./components/Card\\\";\\n// import Butterfilies from \\\"./cards.json\\\";\\n// import logo from './logo.svg';\\nimport './App.css';\\n\\nclass App extends Component {\\n  state = {\\n    butterfly,\\n    clickedButterfly: [],\\n    score: 0\\n  };\\n\\n  // When clicked on card, the butterfly is reshuffled out of the array\\n  clicked = event => {\\n    // const currentButterfly = event.target.alt;\\n    // const ButterflySelected= this.state.clickedButterfly.indexOf(currentButterfly) > -1;\\n  };\\n  \\n  // if (ButterflySelected) {\\n\\n\\n//If clicked on previous butterfly that \\n  render() {\\n    return (\\n      <Wrapper>\\n        <Title>Butterfilies</Title>\\n        {this.state.butterfly.map(butterfly => (\\n          <FriendCard\\n          // clicked={this.clicked}\\n          id={butterfly.id}\\n          key={butterfly.id}\\n          image ={butterfly.image}\\n          />\\n        ))}\\n        </Wrapper>\\n    );\\n}\\n}\\n\\nexport default App;\\n\",\"// This optional code is used to register a service worker.\\n// register() is not called by default.\\n\\n// This lets the app load faster on subsequent visits in production, and gives\\n// it offline capabilities. However, it also means that developers (and users)\\n// will only see deployed updates on subsequent visits to a page, after all the\\n// existing tabs open on the page have been closed, since previously cached\\n// resources are updated in the background.\\n\\n// To learn more about the benefits of this model and instructions on how to\\n// opt-in, read https://bit.ly/CRA-PWA\\n\\nconst isLocalhost = Boolean(\\n  window.location.hostname === 'localhost' ||\\n    // [::1] is the IPv6 localhost address.\\n    window.location.hostname === '[::1]' ||\\n    // 127.0.0.1/8 is considered localhost for IPv4.\\n    window.location.hostname.match(\\n      /^127(?:\\\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\\n    )\\n);\\n\\nexport function register(config) {\\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\\n    // The URL constructor is available in all browsers that support SW.\\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\\n    if (publicUrl.origin !== window.location.origin) {\\n      // Our service worker won't work if PUBLIC_URL is on a different origin\\n      // from what our page is served on. This might happen if a CDN is used to\\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\\n      return;\\n    }\\n\\n    window.addEventListener('load', () => {\\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\\n\\n      if (isLocalhost) {\\n        // This is running on localhost. Let's check if a service worker still exists or not.\\n        checkValidServiceWorker(swUrl, config);\\n\\n        // Add some additional logging to localhost, pointing developers to the\\n        // service worker/PWA documentation.\\n        navigator.serviceWorker.ready.then(() => {\\n          console.log(\\n            'This web app is being served cache-first by a service ' +\\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\\n          );\\n        });\\n      } else {\\n        // Is not localhost. Just register service worker\\n        registerValidSW(swUrl, config);\\n      }\\n    });\\n  }\\n}\\n\\nfunction registerValidSW(swUrl, config) {\\n  navigator.serviceWorker\\n    .register(swUrl)\\n    .then(registration => {\\n      registration.onupdatefound = () => {\\n        const installingWorker = registration.installing;\\n        if (installingWorker == null) {\\n          return;\\n        }\\n        installingWorker.onstatechange = () => {\\n          if (installingWorker.state === 'installed') {\\n            if (navigator.serviceWorker.controller) {\\n              // At this point, the updated precached content has been fetched,\\n              // but the previous service worker will still serve the older\\n              // content until all client tabs are closed.\\n              console.log(\\n                'New content is available and will be used when all ' +\\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\\n              );\\n\\n              // Execute callback\\n              if (config && config.onUpdate) {\\n                config.onUpdate(registration);\\n              }\\n            } else {\\n              // At this point, everything has been precached.\\n              // It's the perfect time to display a\\n              // \\\"Content is cached for offline use.\\\" message.\\n              console.log('Content is cached for offline use.');\\n\\n              // Execute callback\\n              if (config && config.onSuccess) {\\n                config.onSuccess(registration);\\n              }\\n            }\\n          }\\n        };\\n      };\\n    })\\n    .catch(error => {\\n      console.error('Error during service worker registration:', error);\\n    });\\n}\\n\\nfunction checkValidServiceWorker(swUrl, config) {\\n  // Check if the service worker can be found. If it can't reload the page.\\n  fetch(swUrl)\\n    .then(response => {\\n      // Ensure service worker exists, and that we really are getting a JS file.\\n      const contentType = response.headers.get('content-type');\\n      if (\\n        response.status === 404 ||\\n        (contentType != null && contentType.indexOf('javascript') === -1)\\n      ) {\\n        // No service worker found. Probably a different app. Reload the page.\\n        navigator.serviceWorker.ready.then(registration => {\\n          registration.unregister().then(() => {\\n            window.location.reload();\\n          });\\n        });\\n      } else {\\n        // Service worker found. Proceed as normal.\\n        registerValidSW(swUrl, config);\\n      }\\n    })\\n    .catch(() => {\\n      console.log(\\n        'No internet connection found. App is running in offline mode.'\\n      );\\n    });\\n}\\n\\nexport function unregister() {\\n  if ('serviceWorker' in navigator) {\\n    navigator.serviceWorker.ready.then(registration => {\\n      registration.unregister();\\n    });\\n  }\\n}\\n\",\"import React from 'react';\\nimport ReactDOM from 'react-dom';\\nimport './index.css';\\nimport App from './App';\\nimport * as serviceWorker from './serviceWorker';\\n\\nReactDOM.render(<App />, document.getElementById('root'));\\n\\n// If you want your app to work offline and load faster, you can change\\n// unregister() to register() below. Note this comes with some pitfalls.\\n// Learn more about service workers: https://bit.ly/CRA-PWA\\nserviceWorker.unregister();\\n\"]}","code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[0],[,,,,,,function(e){e.exports=[{id:1,image:\"/images/beautyButterfly.jpg\",clicked:!1},{id:2,image:\"/images/cheerButterfly.jpg\",clicked:!1},{id:3,image:\"/images/flawButterfly.jpg\",clicked:!1},{id:4,image:\"/images/jadeButterfly.jpg\",clicked:!1},{id:5,image:\"/images/mysterioButterfly.jpg\",clicked:!1},{id:6,image:\"/images/prettyButterfly.jpg\",clicked:!1},{id:7,image:\"/images/sirenButterfly.jpg\",clicked:!1},{id:8,image:\"/images/spawnButterfly.jpg\",clicked:!1},{id:9,image:\"/images/speedoButterfly.jpg\",clicked:!1},{id:10,image:\"/images/spottyButterfly.jpg\",clicked:!1}]},,,function(e,t,i){e.exports=i(20)},,,,,,function(e,t,i){},function(e,t,i){},function(e,t,i){},function(e,t,i){},function(e,t,i){},function(e,t,i){\"use strict\";i.r(t);var a=i(0),n=i.n(a),c=i(2),r=i.n(c),l=(i(15),i(3)),o=i(4),m=i(7),u=i(5),s=i(8),d=(i(16),function(e){return n.a.createElement(\"div\",{className:\"card\"},n.a.createElement(\"div\",{className:\"img-container\"},n.a.createElement(\"img\",{alt:e.name,src:e.image})))}),g=(i(17),function(e){return n.a.createElement(\"div\",{className:\"wrapper\"},e.children)});i(18);var f=function(e){return n.a.createElement(\"h1\",{className:\"title\"},e.children)},p=i(6),y=(i(19),function(e){function t(){var e,i;Object(l.a)(this,t);for(var a=arguments.length,n=new Array(a),c=0;c<a;c++)n[c]=arguments[c];return(i=Object(m.a)(this,(e=Object(u.a)(t)).call.apply(e,[this].concat(n)))).state={butterfly:p,clickedButterfly:[],score:0},i.clicked=function(e){},i}return Object(s.a)(t,e),Object(o.a)(t,[{key:\"render\",value:function(){return n.a.createElement(g,null,n.a.createElement(f,null,\"Butterfilies\"),this.state.butterfly.map(function(e){return n.a.createElement(d,{id:e.id,key:e.id,image:e.image})}))}}]),t}(a.Component));Boolean(\"localhost\"===window.location.hostname||\"[::1]\"===window.location.hostname||window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/));r.a.render(n.a.createElement(y,null),document.getElementById(\"root\")),\"serviceWorker\"in navigator&&navigator.serviceWorker.ready.then(function(e){e.unregister()})}],[[9,1,2]]]);","extractedComments":[]}